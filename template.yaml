AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-adpoints
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  getAllPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: built/
      Handler: get-all-points.getAllPointsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all points from
        a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Points
      Environment:
        Variables:
          POINTS_TABLE: !Ref Points
      Events:
        Api:
          Type: Api
          Properties:
            Path: /points
            Method: GET

  getAllQuestionsByUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: built/
      Handler: get-all-questions-by-user-id.getAllQuestionsByUserIdHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all questions by userId from
        a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
      Environment:
        Variables:
          QUESTIONS_TABLE: !Ref Questions
      Events:
        Api:
          Type: Api
          Properties:
            Path: /questions/{userId}
            Method: GET

  getQuestionByIdAndUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: built/
      Handler: get-question-by-id-and-user-id.getQuestionByIdAndUserIdHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
      Environment:
        Variables:
          QUESTIONS_TABLE: !Ref Questions
      Events:
        Api:
          Type: Api
          Properties:
            Path: /question/{id}/{userId}
            Method: GET

  putQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: built/
      Handler: src/handlers/put-question.putQuestionHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
      Environment:
        Variables:
          QUESTIONS_TABLE: !Ref Questions
      Events:
        Api:
          Type: Api
          Properties:
            Path: /question
            Method: POST

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
    Cors:
      AllowOrigin: "'*'"
      AllowCredentials: true
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
